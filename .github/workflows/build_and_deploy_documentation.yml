name: Build and Deploy Documentation

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'oceantracker/**'
      - 'tutorials_how_to/**'
      - 'pyproject.toml'
      - '.github/workflows/docs.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'oceantracker/**'
      - 'tutorials_how_to/**'
      - 'pyproject.toml'
      - '.github/workflows/docs.yml'
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-docs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0  # Fetch all history for proper git info
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc graphviz
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e .[docs]
          pip list
      
      - name: Build parameter reference
        run: |
          cd docs
          python build_parameter_ref.py
          cd ..
      
      - name: Convert Jupyter notebooks to RST
        run: |
          cd tutorials_how_to
          for notebook in *.ipynb; do
            if [ -f "$notebook" ]; then
              jupyter nbconvert "$notebook" --to rst
              # Move generated files to docs
              base_name="${notebook%.ipynb}"
              if [ -f "${base_name}.rst" ]; then
                mv "${base_name}.rst" ../docs/info/how_to/
              fi
              if [ -d "${base_name}_files" ]; then
                mv "${base_name}_files" ../docs/info/how_to/
              fi
            fi
          done
          cd ..
      
      - name: Build Sphinx documentation
        run: |
          cd docs
          sphinx-build -b html -W --keep-going . _build/html
          cd ..
      
      - name: Check for broken links (optional)
        continue-on-error: true
        run: |
          cd docs
          sphinx-build -b linkcheck . _build/linkcheck
          cd ..
      
      - name: Upload artifact for GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/_build/html
      
      - name: Upload documentation as artifact (for PR preview)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: documentation-preview
          path: docs/_build/html
          retention-days: 7

  deploy-docs:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build-docs
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  comment-pr:
    if: github.event_name == 'pull_request'
    needs: build-docs
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
      - name: Comment PR with artifact link
        uses: actions/github-script@v7
        with:
          script: |
            const artifactUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ“š Documentation preview is available as an artifact [here](${artifactUrl}).\n\nDownload and extract the artifact, then open \`index.html\` in your browser to preview the changes.`
            })